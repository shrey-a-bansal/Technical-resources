// NOTE : We assume that linked list 1 is larger than linked list 2

Node* reverse(Node* head){
  if(!head || !head->next) return head;
  Node* prev = NULL;
  Node* curr = head;
  Node* nxt = NULL;
  while(curr){
    nxt = curr->next;
    curr->next = prev;
    prev = curr;
    curr = nxt;
  }
  return prev;
}

Node* subtract(Node* head1, Node* head2){
  if(!head1){
    head2->val = -head2->val;
    return head2;
  }
  if(!head2) return head1;
  
  Node* l1 = head1;
  Node* l2 = head2;
  l1 = reverse(l1);
  l2 = reverse(l2);
  int borrow = 0;
  Node* temp = new Node(-1);
  
  while(l1){
    int value = borrow + l1->val - l2->val;
    if(value<0){
      borrow = -1;
      value += 10;
    }
    else borrow = 0;
    
    Node* nnode = new Node(value);
    nnode->next = temp;
    temp = nnode;
    
    l1 = l1->next;
    if(l2) l2 = l2->next;
  }
  return temp;
}